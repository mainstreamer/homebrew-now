#!/usr/bin/env sh
cd $PWD
source .now
APP_PATH="$APP_PATH"
REMOTE_HOST="$REMOTE_HOST"
PROJECT_NAME="$PROJECT_NAME"
REMOTE_CONTAINER_NAME="php-$PROJECT_NAME"
COMPOSER_MEMORY_LIMIT=-1

export $(egrep -v '^#' .env | xargs)

case "$1" in

restart)        echo "restarting $PROJECT_NAME project"
                now stop
                now operate;;
c)              now bin/console cache:clear $2 $3 $4;;
v)              now bin/console d:s:v;;
u)           now bin/console d:s:u --force;;
cache)          now c;;
f)              now bin/console hautelook:fixtures:load -n;;
fix)            now f;;
phpunit)        docker-compose exec php sh -c "cd $APP_PATH && $APP_PATH/vendor/bin/phpunit $2 $3 $4 $5";;
build)          docker-compose build;;
build-test-env) docker-compose -f docker-compose-ci.yaml build;;
build-prod-env) docker-compose -f docker-compose-deploy.yaml build;;
shape)          docker-compose exec php sh -c "composer install -d $APP_PATH"
                now f:load;;
run-test-env)   docker-compose -f docker-compose-ci.yaml up -d;;
run-prod-env)   docker-compose -f docker-compose-deploy.yaml up -d;;
run)            docker-compose up -d;;
operate)        docker-sync-stack start;;
stop)           docker stop $(docker ps -q);;
rm)             docker-compose down
                docker-sync-stack clean;;

test)           echo "Testing $PROJECT_NAME project with behat"
                docker-compose exec php sh -c "cd $APP_PATH && $APP_PATH/vendor/bin/behat -f progress $2 $3 $4 $5";;
#                docker-compose exec php sh -c "cd $APP_PATH && $APP_PATH/vendor/bin/behat -f pretty $2 $3 $4 $5";;
composer)       docker-compose exec php sh -c "cd $APP_PATH && composer $2 $3 $4 $5";;
bin/console)    docker-compose exec php sh -c "cd $APP_PATH && $1 $2 $3 $4";;
ssh)            docker-compose exec -u 0 "$2" sh;;
services)       docker service ps;;
::)             docker --tlsverify --tlscacert=.docker/cert/ca.pem --tlscert=.docker/cert/cert.pem --tlskey=.docker/cert/key.pem -H=$REMOTE_HOST $2 $3 $4 $5;;
rebuild)        docker-compose build $2;;
reset)          now rm
                now build
                now operate
                echo "project $PROJECT_NAME rebuilt successfully"
                ;;
::compose)      docker-compose -f docker-compose-deploy.yaml  --tlsverify --tlscacert=.docker/cert/ca.pem --tlscert=.docker/cert/cert.pem --tlskey=.docker/cert/key.pem -H=$REMOTE_HOST up --build -d;;
::compose-nb)   docker-compose -f docker-compose-deploy.yaml  --tlsverify --tlscacert=.docker/cert/ca.pem --tlscert=.docker/cert/cert.pem --tlskey=.docker/cert/key.pem -H=$REMOTE_HOST up -d;;
::ssh)          docker --tlsverify --tlscacert=.docker/cert/ca.pem --tlscert=.docker/cert/cert.pem --tlskey=.docker/cert/key.pem -H=$REMOTE_HOST exec -u 0 -it $REMOTE_CONTAINER_NAME sh;;
ports)          docker-compose ps;;
ip)             echo $REMOTE_HOST;;
::bin/console)  docker --tlsverify --tlscacert=.docker/cert/ca.pem --tlscert=.docker/cert/cert.pem --tlskey=.docker/cert/key.pem -H=$REMOTE_HOST exec $REMOTE_CONTAINER_NAME sh -c "cd $APP_PATH && bin/console $2 $3 $4" ;;
-h) echo "
                     _   ______ _       __
      ▀▄   ▄▀       / | / / __ \ |     / /
     ▄█▀███▀█▄     /  |/ / / / / | /| / /
    █▀███████▀█   / /|  / /_/ /| |/ |/ /
    ▀ ▀▄▄ ▄▄▀ ▀  /_/ |_/\____/ |__/|__/

    now v 1.2.6 (190319)
    Handy docker shortcuts
    ----------------------
    USAGE: now [key] [param]
    KEYS:
    test                    runs behat test inside container [up to 4 optional params]

    rm                      clean docker sync stack
    build                   builds docker containers from docker-compose file
    operate                 run containers and docker-sync
    ssh [service]           ssh into docker service
    restart                 stops all docker services and starts them again
    stop                    stops all docker services
    c, cache                clears cache [up to 4 optional params]
    f, fix                  loads fixtures
    rm                      cleans docker sync stack
    bin/console [command]   do anything with symfony console inside container
    composer                runs composer with optional params [up to 4 optional params]
    build-test-env          builds environment for testing
    run-test-env            runs environment for testing
    build-prod-env          builds environment for prod
    run-prod-env            runs environment for prod
    run                     runs stack w/o sync container
    operate                 runs stack with sync container
    reset                   stops all, destroys all, rebuilds all and starts stack again
    :: [docker command]     connect to remote docker daemon and execute command
    ports                   shows exposed ports of your stack
    h                       help
    ip                      get ip of current remote host with dockerd
    ::compose               execute docker compose for remote host
    ::bin/console)          execute symfony console in remote php container
    ";;
*) now -h
esac
